:||{
    程序参数及使用方式

    Author: Jacob
}

help=
version=

create=
rename=
delete=
delete_all=
invalid=

MODULE=
NEW_MODULE=
COMMENT=
INVALID_OPT=

opt=

MODULE_NAME=
SUB_MODULE_OPTS=

for option
do
    opt="$opt `echo $option | sed -e \"s/\(--[^=]*=\)\(.* .*\)/\1'\2'/\"`"
    case "$option" in
        -*=*) value=`echo "$option" | sed -e 's/[-_a-zA-Z0-9]*=//'` ;;
        *) value="" ;;
    esac

    case "$option" in
        -h|--help)               help=yes                      ;;
        -v|--version)            version=yes                   ;;
        --create)                create=yes                    ;;
        --delete)                delete=yes                    ;;
        --delete-all)            delete_all=yes                ;;
        --comment=*)             COMMENT="${value}"            ;;
        --module=*)              MODULE="${value}"             ;;
        --new-name=*)            NEW_MODULE="${value}"         ;;
        --rename)                rename=yes                    ;;
        *)
            invalid=yes
            INVALID_OPT="${INVALID_OPT} ${option}"
        ;;
    esac
done

if [[ "${invalid}" && ! "${MODULE}" ]]; then
    echo-msg "$0: error: invalid option \"${INVALID_OPT}\" !"
    exit 1
fi

if [[ "${help}" && ! "${MODULE}" ]]; then
    cat << END

  -h | --help                        帮助信息
  -v | --version                     版本信息
  --create                           创建模块，加此参数，则module和comment必须指定，与 --rename --delete --delete-all 不能同时出现
  --rename                           修改模块名，加此参数，则module new-name comment必须指定，与 --create --delete --delete-all 不能同时出现
  --comment                          注释，与 --create | --rename 同用，解释模块的功能
  --delete                           删除模块，加此参数，则module必须指定，与 --rename --create --delete-all 不能同时出现
  --delete-all                       删除所有模块，与 --rename --create --delete 不能同时出现
  --module=module-name               指定模块名：单独使用时，表示运行指定的模块，若有参数，则执行的是模块程序的参数
  --new-name=new-module-name         指定新的模块名，--rename 配合使用

END
    exit 1
fi

if [[ "${version}" && ! "${MODULE}" ]]; then
    cat << END

  $0 is 1.0.1

END
    exit 1
fi

all-exists() {
    echo-msg "--create --delete --rename --delete-all 参数，同一时间只能出现一次"
    exit 1
}

generate-code() {
    . code
    main > "${modules_dir}/${MODULE}/${MODULE}" && chmod u+x "${modules_dir}/${MODULE}/${MODULE}"
    init > "${modules_dir}/${MODULE}/auto/init"
    args > "${modules_dir}/${MODULE}/auto/options"
}

create-module() {
    local module_dir="${modules_dir}/${1}"
    if [ ! -d "${module_dir}" ]; then
        mkdir -p "${module_dir}"
        echo "${1} # ${2}" >> "${modules_file}"
        echo-msg "创建模块：${1} 成功！路径为：${module_dir}"
        MODULE_NAME="${MODULE}"
        generate-code
    else
        echo-msg "${1} 模块已经存在！"
    fi
}

:||{
    创建 module 的逻辑
}
if [ "${create}" ]; then
    if [[ "${rename}" || "${delete}" || "${delete_all}" ]]; then
        all-exists
    fi

    if [[ ! "${COMMENT}" || ! "${MODULE}" ]]; then
        echo-msg "创建模块名，必须指定模块名及描述信息，--module，--comment不能为空"
        exit 1
    else
        create-module "${MODULE}" "${COMMENT}"
        exit 0
    fi
fi

delete-module() {
    local module_dir="${modules_dir}/${1}"
    if [ -d "${module_dir}" ]; then
        rm -rf "${module_dir}"
        sed -ig "/${1}/d" "${modules_file}" && rm "${modules_file}"[a-z]
        echo-msg "删除模块：${1} 成功！"
    else
        echo-msg "${1} 模块不存在！"
    fi
}

:||{
    删除 module 的逻辑
}
if [ "${delete}" ]; then
    if [[ "${rename}" || "${create}" || "${delete_all}" ]]; then
        all-exists
    fi

    if [[ ! "${MODULE}" ]]; then
        echo-msg "删除模块，必须指定模块名，--module不能为空"
        exit 1
    fi

    read -p "确定删除 ${MODULE} 模块（删除后不可恢复）？[y|n] : " answer
    if [ "${answer}" = "y" ]; then
        delete-module "${MODULE}"
        exit 0
    else
        exit 0
    fi
fi

if [ "${delete_all}" ]; then
    if [[ "${rename}" || "${create}" || "${delete}" ]]; then
        all-exists
    fi

    read -p "确定删除所有模块（删除后不可恢复）？[y|n] : " answer
    if [ "${answer}" = "y" ]; then
        while read line
        do
            m_name=$(echo "${line}" | awk '{print $1}')
            delete-module "${m_name}"
        done < "${modules_file}"
        exit 0
    else
        exit 0
    fi
fi

rename-module() {
    local src_module_dir="${modules_dir}/${1}"
    local new_module_dir="${modules_dir}/${2}"
    if [ -d "${src_module_dir}" ]; then
        mv "${src_module_dir}" "${new_module_dir}"
        sed -ig "/${1}/d" "${modules_file}" && rm "${modules_file}"[a-z]
        echo "${2} #${3}" >> "${modules_file}"
        echo-msg "重命名模块：${1} 成功！重命名后的模块路径：${new_module_dir}"
    else
        echo-msg "${1} 模块不存在！"
    fi
}

:||{
    重命名 module 的逻辑
}
if [ "${rename}" ]; then
    if [[ "${delete}" || "${create}" || "${delete_all}" ]]; then
        all-exists
    fi

    if [[ ! "${MODULE}" || ! "${COMMENT}" || ! "${NEW_MODULE}" ]]; then
        echo-msg "重命名模块，必须指定模块名等，--module --comment --new-name 不能为空"
        exit 1
    else
        rename-module "${MODULE}" "${NEW_MODULE}" "${COMMENT}"
        MODULE_NAME="${NEW_MODULE}"
        exit 0
    fi
fi

:||{
    new-name 的逻辑
}
if [ "${NEW_MODULE}" ]; then
    if [[ ! "${rename}" ]]; then
        echo-msg "必须与 --rename 配合使用"
    fi
fi

:||{
    module 的逻辑：单独使用时，将所有的参数（除--module=submodule）传递给子模块
}
if [ "${MODULE}" ]; then
    if [[ ! "${rename}" || ! "${delete}" || ! "${create}" || ! "${delete_all}" ]]; then
        SUB_MODULE_OPTS=$(echo "$@" | sed 's/--module=[a-z0-9A-Z]*//')
    fi
fi
